import socket
from cryptography.fernet import Fernet

# Use the same key generated by the server (replace this with the actual key)
key = b'3XOOofv8LbWJ7rmx8sXGfXWy6LlQHnEIH9fNFXGqkGM='  # Update with the key copied from server.py
cipher_suite = Fernet(key)

def mitm_proxy():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 65431))  # Bind to localhost on port 65431
    server_socket.listen()  # Start listening for incoming connections
    
    print("MITM Proxy listening on port 65431...")
    client_conn, addr = server_socket.accept()  # Accept a connection from the client
    with client_conn:
        print(f"MITM Proxy connected to {addr}")
        
        # Connect to the actual server
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_conn:
            server_conn.connect(('localhost', 65432))  # Connect to the secure server

            while True:
                data = client_conn.recv(1024)  # Receive data from the client
                if not data:
                    break  # Exit if no data is received

                print(f"Intercepted: {data.decode()}")
                # Forward the received encrypted data to the server
                server_conn.sendall(data)

                # Receive the response from the server
                response = server_conn.recv(1024)

                # Forward the response back to the client
                client_conn.sendall(response)

if __name__ == "__main__":
    mitm_proxy()
