import socket
from cryptography.fernet import Fernet
import sys


# Use the same key generated by the server (replace this with the actual key)

def mitm_proxy():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 65431))  # Bind to localhost on port 65431
    server_socket.listen()  # Start listening for incoming connections

    print("MITM Proxy listening on port 65431...")
    while True:
        client_conn, addr = server_socket.accept()  # Accept a connection from the client
        with client_conn:
            print(f"MITM Proxy connected to {addr}")

            # Connect to the actual server
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_conn:
                server_conn.connect(('localhost', 65432))  # Connect to the secure server

                # Receive data from the client
                data = client_conn.recv(1024)
                # if not data:
                #     print("Client connection closed.")
                #     break  # Exit if no data is received

                print(f"Intercepted (client to server): {data.decode()}")
                # Forward the received encrypted data to the server
                server_conn.sendall(data)

                # Receive the response from the server
                response = server_conn.recv(1024)

                print(f"Intercepted (server to client): {response.decode()}")
                # Forward the response back to the client
                client_conn.sendall(response)


if __name__ == "__main__":
    # serverKey = sys.argv[0]
    # print("This is the Key:", serverKey)
    # # key = b''  # Update with the key copied from server.py
    # key = bytes(serverKey, 'utf-8')
    # cipher_suite = Fernet(key)

    mitm_proxy()
